/*
 * Copyright (C) 2015-2019 akha, a.k.a. Alexander Kharitonov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
// Yakhont preprocessor

task preprocessor {
    doLast {
        // based on search and replace
        // but if something goes wrong - it'll just not compile (or throw GradleException)

        boolean addDebugActivities = true       // auto generate additional debug Activities
        boolean addDebugFragments  = true       // auto generate additional debug Fragments

        println('Yakhont: preprocessing sources...')

        clearTmpSources()

        if (addDebugActivities) {
            generateActivities()
        }
        if (addDebugFragments) {
            generateFragments()
        }

        completeDebugPackage(addDebugActivities, addDebugFragments)
    }
}

preBuild.dependsOn preprocessor

gradle.buildFinished { buildResult ->
    clearTmpSources()
}

import groovy.transform.Field

@Field String corePath                         = 'src/main/java/akha/yakhont'
@Field String corePathDebug                    = corePath + '/debug'

@Field String fullPath                         = 'src/full/java/akha/yakhont'
@Field String fullPathDebug                    = fullPath + '/debug'

////////////////////////////////////////////////////////////////////////////////////////////////////

// if you need more lifecycle debug versions of Activities and Fragments (including 3rd party ones) - 
// please don't hesitate to add them to the arrays below
// you will find generated debug classes in the 'debug' package with prefix 'Base'
    
// also, you can remove debug Activities and Fragments which is not needed

def generateActivities() {

    String[] debugActivityClasses = [
        'android.accounts.AccountAuthenticatorActivity'                                     ,               
        'android.app.AliasActivity'                                                         ,
        'android.app.ExpandableListActivity'                                                ,                     
        'android.app.LauncherActivity'                                                      ,                           
        'android.app.ListActivity'                                                          ,                               
        'android.app.NativeActivity'                                                        ,                             
        'android.preference.PreferenceActivity'
    ]

    String[] debugSupportActivityClasses = [    // FragmentActivity is a special case
        'androidx.appcompat.app.AppCompatActivity'
    ]

    prepareTemplate(false, true)
    addActivities(fullPathDebug, false, debugActivityClasses       )

    delete fullPathDebug + '/BaseActivity.java'

    prepareTemplate(true, true)
    addActivities(fullPathDebug,  true, debugSupportActivityClasses)
}

def generateFragments() {

    String[] debugFragmentClasses = [
        'androidx.fragment.app.ListFragment'                                                ,
        'androidx.leanback.app.BrandedSupportFragment'                                      ,
        'androidx.leanback.app.BrowseSupportFragment'                                       ,
        'androidx.leanback.app.DetailsSupportFragment'                                      ,
        'androidx.leanback.app.ErrorSupportFragment'                                        ,
        'androidx.leanback.app.GuidedStepSupportFragment'                                   ,
        'androidx.leanback.app.HeadersSupportFragment'                                      ,
        'androidx.leanback.app.RowsSupportFragment'                                         ,
        'androidx.leanback.app.SearchSupportFragment'                                       ,
        'androidx.leanback.app.VerticalGridSupportFragment'                                 ,
        'androidx.leanback.preference.LeanbackListPreferenceDialogFragment'                 ,
        'androidx.leanback.preference.LeanbackPreferenceDialogFragment'                     ,
        'androidx.mediarouter.app.MediaRouteDiscoveryFragment'
    ]
    
    String[] debugDialogFragmentClasses = [
        'androidx.appcompat.app.AppCompatDialogFragment'                                    ,
        'androidx.mediarouter.app.MediaRouteChooserDialogFragment'                          ,
        'androidx.mediarouter.app.MediaRouteControllerDialogFragment'                       ,
        'androidx.preference.EditTextPreferenceDialogFragmentCompat'                        ,
        'androidx.preference.ListPreferenceDialogFragmentCompat'                            ,
        'androidx.preference.MultiSelectListPreferenceDialogFragmentCompat'
    ]

    prepareTemplate(true, false)
    addFragments(fullPathDebug, false, debugFragmentClasses      )
    addFragments(fullPathDebug,  true, debugDialogFragmentClasses)
}

@Field String preprocessorAddToGenerated       = '//YakhontPreprocessor:addToGenerated'
@Field String preprocessorRemoveInFlavor       = '//YakhontPreprocessor:removeInFlavor'
@Field String preprocessorRemoveInGenerated    = '//YakhontPreprocessor:removeInGenerated'

@Field String preprocessorDocRemoveInGenerated = '@yakhont.preprocessor.remove.in.generated'

@Field String fragmentActivity                 = 'androidx.fragment.app.FragmentActivity'

def addActivities(String componentDir, boolean isSupport, String[] data) {
    data.each {
        addActivity(componentDir, getShortClassName(it), it, isSupport, false)
    }
}

def addActivity(String componentDir, String shortClassName, String fullClassName, boolean isSupport, boolean justRename) {
    addComponent(componentDir, 'BaseActivity', 'Base' + shortClassName, justRename,
        isSupport ? fragmentActivity: 'Activity', fullClassName)
}

def addFragments(String componentDir, boolean isDialog, String[] data) {
    data.each {
        addFragment(componentDir, getShortClassName(it), it, isDialog)
    }
}

def addFragment(String componentDir, String shortClassName, String fullClassName, boolean isDialog) {
    String add = isDialog ? 'Dialog': ''
    addComponent(componentDir, 'Base' + add + 'Fragment', 'Base' + shortClassName, false, add + 'Fragment', fullClassName)
}

def addComponent(String componentDir, String oldName, String newName, boolean justRename, String oldClass, String newClass) {
    String oldFileName = oldName + '.java'
    
    copy {
        from       (componentDir)
        include    (oldFileName )
        into       (componentDir)
        rename     { fileName -> fileName.replace(oldName,   newName)   }
        filter     { line     -> line    .replace(oldName,   newName)   }
        
        if (!justRename) {
            String shortClassName = getShortClassName(newClass)

            filter { line     -> //noinspection GroovyAssignabilityCheck
                replaceExtends(  line, oldClass, newClass, oldFileName) }

            filter { line     -> line.replace(preprocessorRemoveInFlavor, '')}

            filter { line     -> //noinspection GroovyAssignabilityCheck
                removeLine(line, preprocessorRemoveInGenerated,    shortClassName,  true,  true)}
            filter { line     -> //noinspection GroovyAssignabilityCheck
                removeLine(line, preprocessorDocRemoveInGenerated, shortClassName, false, false)}

            filter { line     -> //noinspection GroovyAssignabilityCheck
                addLine   (line, preprocessorAddToGenerated,       shortClassName,  true)}
        }
    }
}

static def removeLine(String line, String target, String className, boolean endsWith, boolean commentOut) {
    String newLine = line

    int pos       = line.lastIndexOf('-')
    int posTarget = line.lastIndexOf(target)

    boolean endsCheck = line.trim().endsWith(target)
    if (posTarget > 0 && pos > posTarget) {
        endsCheck = line.substring(0, pos).trim().endsWith(target)
    }
    if (endsWith ? endsCheck: line.contains(target)) {
        boolean update = true
        if (pos > posTarget && className.length() > 0) {
            List<String> names = Arrays.asList(line.substring(pos + 1).trim().split(','))
            update = names.contains(className)
        }
        if (update) {
            newLine = !commentOut ? null:
                    '// ' + (endsWith ? line.substring(0, posTarget): line.replace(target, ''))
        }
        else if (posTarget > 0) {
            newLine = line.substring(0, posTarget)
        }
    }
    return newLine
}

static def addLine(String line, String target, String className, boolean removeExtraAddLines) {
    String newLine = line
    if (line.trim().startsWith(target)) {
        if (removeExtraAddLines) newLine = null
        int pos1 = line.indexOf('-')
        int pos2 = line.indexOf('-', pos1 + 1)

        List<String> names = Arrays.asList(line.substring(pos1 + 1, pos2).trim().split(','))
        if (names.contains(className)) {
            newLine = line.substring(pos2 + 1)
        }
    }
    return newLine
}

static def getShortClassName(String fullClassName) {
    return fullClassName.substring(fullClassName.lastIndexOf('.') + 1)
}

////////////////////////////////////////////////////////////////////////////////////////////////////

def prepareTemplate(boolean isSupport, boolean activities) {

    String filesMask = activities ? '**/BaseActivity.java': '**/*Fragment*'

    copy {
        from (fileTree(corePathDebug).include(filesMask))
        into (fullPathDebug)

        eachFile { copyDetails ->

            String fileName = copyDetails.getName()

            //noinspection ChangeToOperator
            if (activities && isSupport) {
                filter { line ->    //noinspection GroovyAssignabilityCheck
                    replaceExtends(line, 'Activity', fragmentActivity, fileName)
                }

                filter { line ->    //noinspection GroovyAssignabilityCheck
                    addLine(line, preprocessorAddToGenerated, 'FragmentActivity', false)
                }
            }

            filter { line ->        //noinspection GroovyAssignabilityCheck
                removeLine(line, preprocessorRemoveInFlavor, '', true, true)
            }
        }
    }
}

static def replaceExtends(String line, String oldString, String newString, String fileName) {
    String target = 'extends ' + oldString, newLine = line

    if (line.contains('extends') && line.contains(' ' + oldString)) {
        if (line.contains(target)) {
            newLine = line.replace(target, 'extends ' + newString)
        }
        else {
            throw new GradleException('not found \'' + target + '\' in ' + fileName)
        }
    }
    return newLine
}

def completeDebugPackage(boolean addDebugActivities, boolean addDebugFragments) {
    if (addDebugActivities) {
        addActivity(fullPathDebug, 'FragmentActivity', null, true, true)
        delete fullPathDebug + '/BaseActivity.java'
    }
    if (addDebugFragments) {
        delete fullPathDebug + '/BaseFragment.java'
        delete fullPathDebug + '/BaseDialogFragment.java'
    }
}

def clearTmpSources() {
    ant.delete(includeEmptyDirs: 'true') {
        fileset(dir: file('src/full'), includes: '**/*', excludes: '**/AndroidManifest.xml')
    }
}
