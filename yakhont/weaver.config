#
#  Copyright (C) 2015-2020 akha, a.k.a. Alexander Kharitonov
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Config line format - 3 tokens delimited by whitespaces:
#
#   [<lib>]<fully qualified class name>.method[(signature)]     <action>    'callback'
#     or
#   <fully qualified annotation name>.[_D | _R]                 <action>    'callback'
#
# The prefix '<lib>' means weaving JAR from the class path.
#
# NOTE: please use single quotes; double quotes are only for literals inside callbacks
#   (see akha.yakhont.LogDebug below).
#
# The signature's examples:
#   onResume()                   - ()
#   onCreate()                   - (Landroid/os/Bundle;Landroid/os/PersistableBundle;)
#   onRequestPermissionsResult() - (I[Ljava/lang/String;[I)
#   onActivityResult()           - (IILandroid/content/Intent;)
#
# The signature '(<all>)' means all methods with the name specified.
#
# The '_D' and '_R' means 'debug only' (or 'release only') builds - but for annotations only.
#   NOTE: and if you're not using '_D' or '_R' - please don't miss ending '.' for them (annotations).
#
# In case of several callbacks for the same method they are executed in the order declared here,
#   then annotation's callbacks (if any) - also in the declared order.
#
# The possible actions are:
#   before                           - insert 'callback' at the beginning of the method body
#   after                            - insert 'callback' at the end of the method body
#   finally                          - insert 'callback' in the 'finally' clause
#   <fully qualified exception name> - insert 'callback' in the 'catch' clause
#     (Note that the inserted code fragment must end with a 'throw' or 'return' statement.)
#
# The 'callback' may contain '$0' (means 'this'), '$$' (means the method arguments),
#   '$args' (the method arguments as an Object[]) and '$_' (means the method return value).
# Also '$cls' and '$method' supported (for class and method names).
#
# For more info please visit the Javassist site: http://jboss-javassist.github.io/javassist/tutorial/tutorial2.html#before
#
# NOTE: callbacks compilation performed by Javassist library just before weaving.

# For implementation examples please refer to the javadoc for:
#   akha.yakhont.callback.BaseCallbacks
#   akha.yakhont.callback.BaseCallbacks.BaseActivityCallbacks
#   akha.yakhont.callback.BaseCallbacks.BaseFragmentCallbacks

# For implementation example which handles method's returned value please refer to the 'Gestures handling' below.

# classpath's jar (Retrofit) patching demo (<lib> prefix should be used)
<lib>retrofit2.Response.success(<all>)        before 'akha.yakhont.demoservice.MainService.demo("--- Yakhont demo weaving jars", $cls, $method);'

# wildcards demo (for services)
#   use '*' for many symbols, '?' for one symbol and '**' for packages (means '*' + all following ones)
and**.S?rvi*.on*                              before 'akha.yakhont.demoservice.MainService.demo("--- Yakhont demo weaving with wildcards", $cls, $method);'
a?ha.ya?h*nt.dem?ser*.Ma?nS?rv*$D?m*.de*      before 'akha.yakhont.CoreLogger.logError("--- Yakhont demo inner class weaving with wildcards: class " + akha.yakhont.CoreLogger.getDescription($0) + ", method: " + $method);'
a?ha.ya?h*nt.dem?se**.Ma?nS?rv*$D?m*$D?m*.de* before 'akha.yakhont.CoreLogger.logError("--- Yakhont demo inner class weaving with wildcards: class " + akha.yakhont.CoreLogger.getDescription($0) + ", method: " + $method);'

# adding new methods demo ('before' should be used, also '(<all>)' will be ignored - and no wildcards support)
akha.yakhont.demoservice.MainService$Demo$DemoInner.x        before 'akha.yakhont.CoreLogger.logError("--- Yakhont demo new method creation: class " + akha.yakhont.CoreLogger.getDescription($0) + ", method: " + $method);'
akha.yakhont.demoservice.MainService$Demo$DemoInner.y(<all>) before 'akha.yakhont.CoreLogger.logError("--- Yakhont demo new method creation: class " + akha.yakhont.CoreLogger.getDescription($0) + ", method: " + $method);'
public static float akha.yakhont.demoservice.MainService$Demo.z(java.lang.String s, int i) throws Exception { return 0f; /* just for compilation, will be removed from the result code */ } before 'akha.yakhont.CoreLogger.logError("--- Yakhont demo new method creation: class " + akha.yakhont.CoreLogger.getDescription($0) + ", method: " + $method); return 1f;'

# debug annotation: writes to log arguments and return value of annotated method (remove '_D' for release builds handling too)
akha.yakhont.LogDebug._D after 'akha.yakhont.CoreLogger.log(akha.yakhont.CoreLogger.getLogDebugLevel($0, $method, $args), "Yakhont debug - " + akha.yakhont.CoreLogger.getLogDebugDescription($0, $method, $_, $args));'

# defines Yakhont configuration (for details please refer to Core.config(...) description in javadoc)
android.app.Application.onCreate                   before  'akha.yakhont.Core.config(null, null, Boolean.TRUE, null);'
android.app.Activity.onCreate(<all>)               before  'akha.yakhont.Core.config(null, null, Boolean.TRUE, null);'
android.app.Service.onCreate                       before  'akha.yakhont.Core.config(null, null, Boolean.TRUE, null);'

# init Yakhont with default parameters; use Core.init(...) for explicit calls (if necessary)
android.app.Application.onCreate                   after   'akha.yakhont.Core.initDefault($0);'
android.app.Activity.onCreate(<all>)               before  'akha.yakhont.Core.initDefault($0);'
android.app.Service.onCreate                       before  'akha.yakhont.Core.initDefault($0);'

# base Fragment callbacks
androidx.fragment.app.Fragment.onCreate            after   'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onCreated          ($0, $$);'
androidx.fragment.app.Fragment.onStart             after   'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onStarted          ($0    );'
androidx.fragment.app.Fragment.onResume            after   'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onResumed          ($0    );'
androidx.fragment.app.Fragment.onPause             before  'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onPaused           ($0    );'
androidx.fragment.app.Fragment.onStop              before  'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onStopped          ($0    );'
androidx.fragment.app.Fragment.onDestroy           before  'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onDestroyed        ($0    );'
androidx.fragment.app.Fragment.onSaveInstanceState before  'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onSaveInstanceState($0, $$);'
androidx.fragment.app.Fragment.onActivityCreated   after   'akha.yakhont.callback.lifecycle.BaseFragmentLifecycleProceed.onActivityCreated  ($0, $$);'
# end of base Fragment callbacks

# pull-to-refresh
android.app.Activity.onResume                      after   'akha.yakhont.loader.wrapper.BaseLoaderWrapper.SwipeToRefreshWrapper.onPauseOrResume($0,  true);'
android.app.Activity.onPause                       before  'akha.yakhont.loader.wrapper.BaseLoaderWrapper.SwipeToRefreshWrapper.onPauseOrResume($0, false);'

# permissions requesting
android.app.Activity.onResume                      after   'akha.yakhont.CorePermissions.onResume($0);'
android.app.Activity.onRequestPermissionsResult    before  'akha.yakhont.CorePermissions.onRequestPermissionsResult($0, $$);'

# ATTENTION: the order of callbacks is important

# dynamic permissions handling
android.app.Activity.onActivityResult              before  'akha.yakhont.CorePermissions.onActivityResult($0, $$);'
# location access decision dialog
android.app.Activity.onActivityResult              before  'akha.yakhont.location.LocationCallbacks.onActivityResult($0, $$);'
# logger video recording
android.app.Activity.onActivityResult              before  'akha.yakhont.CoreLogger.onActivityResult($0, $$);'

# BaseViewModel loading check
android.app.Activity.onBackPressed                 before  '{if (akha.yakhont.loader.BaseViewModel.isLoadingForWeaver($0)) return;}'

# LiveData observers handling
android.app.Activity.onCreate(<all>)               after   'akha.yakhont.loader.BaseViewModel.updateUiActivityForWeaver(false, $0);'
android.app.Activity.onDestroy                     before  'akha.yakhont.loader.BaseViewModel.updateUiActivityForWeaver(true , $0);'
androidx.fragment.app.Fragment.onCreate            after   'akha.yakhont.loader.BaseViewModel.updateUiFragmentForWeaver(false, $0);'
# service ViewModel cleanup with timeout (if needed, in ms) provided here (ViewModel.onCleared() and some other stuff)
android.app.Service.onDestroy                      before  'akha.yakhont.loader.BaseViewModel.updateUiServiceForWeaver (0    , $0);'

# Gestures handling (for start audio / video recording)
android.app.Activity.dispatchTouchEvent            before  '{if (akha.yakhont.CoreLogger.handleGestureForVideo($0, $$)) return true;}'

# Yakhont cleanup (the order is important, default timeout - 3 seconds)
android.app.Service.onCreate                       after   'akha.yakhont.Core.considerService(true );'
android.app.Service.onDestroy                      before  'akha.yakhont.Core.considerService(false);'
android.app.Service.onDestroy                      before  'akha.yakhont.Core.cleanUpDefault (3000, null);'
android.app.Activity.onDestroy                     before  'akha.yakhont.Core.cleanUpDefault (3000, $0  );'

# prevents crashing on emulators without Google APIs (NullPointerException, etc.)
android.app.Activity.startActivityForResult(<all>) java.lang.RuntimeException  '{ akha.yakhont.location.LocationCallbacks.startActivityForResultExceptionHandler($0, $e); return; }'

# callbacks support example for API < 14 (ICE_CREAM_SANDWICH) - not needed for Yakhont, but Weaver supports any applications
#android.app.Activity.onCreate(Landroid/os/Bundle;)             after   'your code here'
#android.app.Activity.onStart                                   after   'your code here'
#android.app.Activity.onResume                                  after   'your code here'
#android.app.Activity.onPause                                   before  'your code here'
#android.app.Activity.onStop                                    before  'your code here'
#android.app.Activity.onDestroy                                 before  'your code here'
#android.app.Activity.onSaveInstanceState(Landroid/os/Bundle;)  before  'your code here'
#android.app.Application.onConfigurationChanged                 after   'your code here'
# end of callbacks support example for API < 14
