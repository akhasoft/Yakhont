/*
 * Copyright (C) 2015-2020 akha, a.k.a. Alexander Kharitonov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'

apply from:   'preprocessor.gradle'

String verName                  =   projectVerName
int    verCode                  =   projectVerCode

String projectDimensions        =  'common'

ext {
    publishedName               =  'Yakhont'
    publishedDescription        =  'The high-level Android components for data loading, location, lifecycle callbacks and many more'

    publishedGroupId            =   projectGroupId
    publishedArtifactId         =  'yakhont'
    publishedPackaging          =  'aar'
    publishedVersion            =   verName

    projectDefaultFlavor        =  'core'
    projectJavaDocLinks         = ['http://google.github.io/dagger/api/latest/'             ,
                                   'http://reactivex.io/RxJava/1.x/javadoc/'                ,
                                   'http://reactivex.io/RxJava/2.x/javadoc/'                ,
                                   'http://square.github.io/retrofit/1.x/retrofit/'         ,
                                   'http://square.github.io/retrofit/2.x/retrofit/']
}

def dependenciesStrategy = { DependencyResolveDetails details ->
    if     (details.requested.group == 'com.google.android.gms') {
        if (details.requested.name  == 'play-services-location' || 
            details.requested.name  == 'play-services-places-placereport')
            details.useVersion      projectLibVerLocation
        else
            details.useVersion      projectLibVerGms
        details.because 'To enforce releasable units for Google Play Services'
    }
    if (details.requested.group == 'com.squareup.retrofit2') {
        details.useVersion          projectLibVerRetrofit2
        details.because 'To enforce releasable units for Retrofit 2'
    }
    if (details.requested.group == 'com.squareup.okhttp3') {
        details.useVersion          projectLibVerOkHttp3
        details.because 'To enforce releasable units for OkHttp 3'
    }
    if (details.requested.group == 'com.squareup.okhttp') {
        details.useVersion          projectLibVerOkHttp
        details.because 'To enforce releasable units for OkHttp'
    }
    if (details.requested.group == 'com.google.dagger') {
        details.useVersion          projectLibVerDagger
        details.because 'To enforce releasable units for Dagger 2'
    }
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion           projectVerSdk
    buildToolsVersion           projectVerBuildTools

    defaultConfig {
        minSdkVersion           projectVerSdkMin
        targetSdkVersion        projectVerSdk
        versionCode             verCode
        versionName             verName
        resConfigs              projectResConfigs
    }

    compileOptions {
        sourceCompatibility     JavaVersion.VERSION_1_8
        targetCompatibility     JavaVersion.VERSION_1_8
    }

    flavorDimensions            projectDimensions

    productFlavors {
        core {
            dimension           projectDimensions
        }
        full {                  // core + debug classes (for Activities and Fragments)
            dimension           projectDimensions
        }
    }

    defaultPublishConfig       'core' + (projectConfig == projectDebug ? 'Debug': 'Release')

    lintOptions {
        abortOnError            false
    }

    dataBinding {
        enabled                 true
    }

    buildTypes {
        release {
            minifyEnabled       projectConfig != projectNoObfuscate

            projectProGuardFiles.each {
                //noinspection GroovyAssignabilityCheck
                proguardFile            '../proguard/libs/' + it
            }
            proguardFile                './proguard/proguard-consumer.pro'
            proguardFile                './proguard/proguard-project-lib.pro'
            proguardFile                '../proguard/proguard-project.pro'
            //noinspection GroovyAssignabilityCheck
            proguardFile                getDefaultProguardFile('proguard-android.txt')

            consumerProguardFiles       './proguard/proguard-consumer.pro'
        }
    }

    libraryVariants.all { variant ->
        String prefix = variant.getVariantData().getVariantConfiguration().getFlavorName() +
            variant.buildType.name.capitalize()
        configurations.getByName(prefix + 'UnitTestCompileClasspath')              
                                                     .resolutionStrategy.eachDependency dependenciesStrategy
        configurations.getByName(prefix + 'UnitTestRuntimeClasspath')              
                                                     .resolutionStrategy.eachDependency dependenciesStrategy
        variant.getCompileConfiguration()            .resolutionStrategy.eachDependency dependenciesStrategy
        variant.runtimeConfiguration                 .resolutionStrategy.eachDependency dependenciesStrategy
        variant.getAnnotationProcessorConfiguration().resolutionStrategy.eachDependency dependenciesStrategy
    }
    testVariants   .all { variant ->
        variant.getCompileConfiguration()            .resolutionStrategy.eachDependency dependenciesStrategy
        variant.getRuntimeConfiguration()            .resolutionStrategy.eachDependency dependenciesStrategy
    }
}

dependencies {
    api                 "com.google.dagger:dagger:$projectLibVerDefault"
    annotationProcessor "com.google.dagger:dagger-compiler:$projectLibVerDefault"

    // v4 Support Libraries
    // fragment has dependencies on compat, core-utils, core-ui and media-compat
    api                 "androidx.core:core:$projectLibVerCoreCore"
    api                 "androidx.fragment:fragment:$projectLibVerFragmentFragment"
    api                 "androidx.legacy:legacy-support-core-ui:$projectLibVerLegacyLegacySupportCoreUi"
    api                 "androidx.legacy:legacy-support-core-utils:$projectLibVerLegacyLegacySupportCoreUtils"
    api                 "androidx.media:media:$projectLibVerMediaMedia"
    // v7 Support Libraries
    // appcompat (includes support for material design) depends on the v4 Support Library
    api                 "androidx.appcompat:appcompat:$projectLibVerAppcompatAppcompat"
    api                 "androidx.recyclerview:recyclerview:$projectLibVerRecyclerViewRecyclerView"
    // v13 Support Library (support for the Fragment with the FragmentCompat)
    api                 "androidx.legacy:legacy-support-v13:$projectLibVerLegacyLegacySupportV13"

    api                 "androidx.annotation:annotation:$projectLibVerAnnotationAnnotation"
    api                 "androidx.lifecycle:lifecycle-common-java8:$projectLibVerLifecycleLifecycleCommonJava8"
    api                 "androidx.lifecycle:lifecycle-extensions:$projectLibVerLifecycleLifecycleExtensions"

    api                 "com.google.android.material:material:$projectLibVerNotxMaterialMaterial"
    api                 "com.google.android.gms:play-services-location:$projectLibVerDefault"

    fullApi             "androidx.leanback:leanback:$projectLibVerLeanbackLeanback"
    fullApi             "androidx.leanback:leanback-preference:$projectLibVerLeanbackLeanbackPreference"
    fullApi             "androidx.legacy:legacy-preference-v14:$projectLibVerLegacyLegacyPreferenceV14"
    fullApi             "androidx.mediarouter:mediarouter:$projectLibVerMediaRouterMediaRouter"
    fullApi             "androidx.preference:preference:$projectLibVerPreferencePreference"

    api                 "com.github.bumptech.glide:glide:$projectLibVerGlide"
    annotationProcessor "com.github.bumptech.glide:compiler:$projectLibVerGlide"

    api                 "com.squareup.picasso:picasso:$projectLibVerPicasso"

    api                 "androidx.paging:paging-runtime:$projectLibVerPaging"

    api                ("com.squareup.retrofit2:retrofit:$projectLibVerDefault") {
        exclude group:  "com.squareup.okhttp3", module: "okhttp"
    }
    api                 "com.squareup.retrofit2:converter-gson:$projectLibVerDefault"

    api                 "com.squareup.retrofit2:adapter-rxjava:$projectLibVerDefault"
    api                 "com.squareup.retrofit2:adapter-rxjava2:$projectLibVerDefault"

    api                 "com.squareup.okhttp3:okhttp:$projectLibVerDefault"
    api                 "com.squareup.okhttp3:logging-interceptor:$projectLibVerDefault"

    fullApi             "com.squareup.retrofit:retrofit:$projectLibVerRetrofit"
    fullApi             "com.squareup.okhttp:okhttp:$projectLibVerDefault"
    fullApi             "com.squareup.okhttp:okhttp-urlconnection:$projectLibVerDefault"

    api                 "io.reactivex.rxjava2:rxjava:$projectLibVerRxJava2"
    fullApi             "io.reactivex:rxjava:$projectLibVerRxJava"
}

apply from: '../publish.gradle'
