/*
 * Copyright (C) 2015-2018 akha, a.k.a. Alexander Kharitonov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        flatDir dirs: '../yakhont-weaver/build/libs'                        // Yakhont weaver
    }
    dependencies {
        classpath "akha.yakhont.weaver:yakhont-weaver:0.9.19"               // Yakhont weaver
        classpath "org.javassist:javassist:${rootProject.ext.projectLibVerJavassist}"
    }
}

apply plugin: 'com.android.application'

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion           26
    buildToolsVersion          '26.0.2'

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
        applicationId           'akha.yakhont.demosimple'
        minSdkVersion           14
        //noinspection OldTargetApi
        targetSdkVersion        23      // for lower values permissions dialogs will not be shown
        versionCode            10101
        versionName           '1.1'

        resConfigs            'en', 'ru'
    }

    compileOptions {
        sourceCompatibility     JavaVersion.VERSION_1_8
        targetCompatibility     JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError            false
    }

    buildTypes {
        release {
            minifyEnabled       true

            rootProject.ext.projectProGuardFiles.each {
                //noinspection GroovyAssignabilityCheck
                proguardFile            '../proguard/libs/' + it
            }
            proguardFile                './proguard/proguard-project-app.pro'
            proguardFile                '../proguard/proguard-project.pro'
            //noinspection GroovyAssignabilityCheck
            proguardFile                getDefaultProguardFile('proguard-android.txt')
        }
    }

    // workaround for the local Yakhont aar
    repositories {
        flatDir dirs: '../yakhont/build/outputs/aar'
    }
}

ext.libVerDemoSimpleSupport     = rootProject.ext.projectLibVerSupport
ext.libVerDemoSimpleLifecycle   = rootProject.ext.projectLibVerLifecycle
ext.libVerDemoSimpleLocation    = rootProject.ext.projectLibVerLocation

ext.libVerDemoSimpleRetrofit2   = rootProject.ext.projectLibVerRetrofit2

ext.libVerDemoSimpleRxJava      = rootProject.ext.projectLibVerRxJava
ext.libVerDemoSimpleRxJava2     = rootProject.ext.projectLibVerRxJava2

ext.libVerDemoSimpleDagger      = rootProject.ext.projectLibVerDagger
                                                                                       // in alphabetical order:
dependencies {
    implementation      "com.google.dagger:dagger:${libVerDemoSimpleDagger}"           // Dagger2
    annotationProcessor "com.google.dagger:dagger-compiler:${libVerDemoSimpleDagger}"

    implementation      "com.android.support:appcompat-v7:${libVerDemoSimpleSupport}"  // Google
    implementation      "com.android.support:recyclerview-v7:${libVerDemoSimpleSupport}"
    implementation      "android.arch.lifecycle:common-java8:${libVerDemoSimpleLifecycle}"
    implementation      "android.arch.lifecycle:extensions:${libVerDemoSimpleLifecycle}"
    // comment out if you don't need Location API
    // (and uncomment lines in proguard-project-app.pro)
    implementation      "com.google.android.gms:play-services-location:${libVerDemoSimpleLocation}"

    implementation      "com.squareup.retrofit2:retrofit:${libVerDemoSimpleRetrofit2}" // Retrofit
    implementation      "com.squareup.retrofit2:converter-gson:${libVerDemoSimpleRetrofit2}"

    implementation      "io.reactivex.rxjava2:rxjava:${libVerDemoSimpleRxJava2}"       // Rx
    implementation      "io.reactivex:rxjava:${libVerDemoSimpleRxJava}"

    implementation      name:'yakhont', ext:'aar'                                      // Yakhont
}

// for demo simple let's build both release and debug - just to be sure the weaver is working fine

String[] weaverConfigFiles = null   // use default one; or something like "new String[] {projectDir.absolutePath + '/weaver.config'}"
boolean weaverDebug = false, weaverAddConfig = true

android.applicationVariants.all { variant ->
    AbstractCompile javaCompile = variant.javaCompiler
    javaCompile.doLast {
        //noinspection UnnecessaryQualifiedReference
        new akha.yakhont.weaver.Weaver().run(weaverDebug, android.defaultConfig.applicationId,
                javaCompile.destinationDir.toString(), javaCompile.classpath.asPath,
                android.bootClasspath.join(File.pathSeparator), weaverConfigFiles, weaverAddConfig)
    }
}

/* if (by some reason) you're about to use the deprecated Transform API, you can try the following:
//noinspection GroovyAssignabilityCheck, UnnecessaryQualifiedReference
android.registerTransform(new akha.yakhont.weaver.WeaverTransform(weaverDebug, android.defaultConfig.applicationId,
        android.bootClasspath.join(File.pathSeparator), weaverConfigFiles, weaverAddConfig))
*/
