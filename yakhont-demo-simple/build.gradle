/*
 * Copyright (C) 2015-2020 akha, a.k.a. Alexander Kharitonov
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import akha.yakhont.weaver.Weaver

buildscript {
    repositories {
        jcenter()
        flatDir dirs: '../yakhont-weaver/build/libs'                        // Yakhont weaver
    }
    dependencies {
        classpath "akha.yakhont.weaver:yakhont-weaver:$projectVerName"
        classpath "org.javassist:javassist:$projectLibVerJavassist"         // Yakhont weaver
    }
}

apply plugin: 'com.android.application'

def dependenciesStrategy = { DependencyResolveDetails details ->
    // comment out if you don't need Location API
    if     (details.requested.group == 'com.google.android.gms') {
        if (details.requested.name  == 'play-services-location' ||
            details.requested.name  == 'play-services-places-placereport')
            details.useVersion      projectLibVerLocation
        else
            details.useVersion      projectLibVerGms
        details.because 'To enforce releasable units for Google Play Services'
    }
    if (details.requested.group == 'com.squareup.retrofit2') {
        details.useVersion          projectLibVerRetrofit2
        details.because 'To enforce releasable units for Retrofit 2'
    }
    if (details.requested.group == 'com.squareup.okhttp3') {
        details.useVersion          projectLibVerOkHttp3
        details.because 'To enforce releasable units for OkHttp 3'
    }
    if (details.requested.group == 'com.google.dagger') {
        details.useVersion          projectLibVerDagger
        details.because 'To enforce releasable units for Dagger 2'
    }
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion           projectVerSdk
    buildToolsVersion           projectVerBuildTools

    //noinspection GroovyMissingReturnStatement
    defaultConfig {
        applicationId          'akha.yakhont.demosimple'
        multiDexEnabled         true                        // for debug builds
        minSdkVersion           projectVerSdkMin
        targetSdkVersion        projectVerSdk
        versionCode             projectVerCodeDemo
        versionName             projectVerNameDemo
        resConfigs              projectResConfigs
    }

    compileOptions {
        sourceCompatibility     JavaVersion.VERSION_1_8
        targetCompatibility     JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError            false
    }

    buildFeatures {
        dataBinding             true
    }

    buildTypes {
        release {
            minifyEnabled       projectConfig != projectNoObfuscate

            projectProGuardFiles.each {
                //noinspection GroovyAssignabilityCheck
                proguardFile            '../proguard/libs/' + it
            }
            proguardFile                '../proguard/libs/proguard-gson.pro'

            proguardFile                './proguard/proguard-project-app.pro'
            proguardFile                '../proguard/proguard-project.pro'
            //noinspection GroovyAssignabilityCheck
            proguardFile                getDefaultProguardFile('proguard-android.txt')
        }
    }

    repositories {
        flatDir dirs: '../yakhont/build/outputs/aar'
    }

    applicationVariants.all { variant ->
        String prefix = variant.buildType.name
        configurations.getByName(prefix + 'UnitTestCompileClasspath')
                                                     .resolutionStrategy.eachDependency dependenciesStrategy
        configurations.getByName(prefix + 'UnitTestRuntimeClasspath')
                                                     .resolutionStrategy.eachDependency dependenciesStrategy
        variant.getCompileConfiguration()            .resolutionStrategy.eachDependency dependenciesStrategy
        variant.runtimeConfiguration                 .resolutionStrategy.eachDependency dependenciesStrategy
        variant.getAnnotationProcessorConfiguration().resolutionStrategy.eachDependency dependenciesStrategy
    }
    testVariants      .all { variant ->
        variant.getCompileConfiguration()            .resolutionStrategy.eachDependency dependenciesStrategy
        variant.getRuntimeConfiguration()            .resolutionStrategy.eachDependency dependenciesStrategy
    }
}

dependencies {
    implementation      "androidx.multidex:multidex:$projectLibVerMultidex"     // for debug builds
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$projectLibVerLeakCanary"

    implementation      "com.google.dagger:dagger:$projectLibVerDefault"
    annotationProcessor "com.google.dagger:dagger-compiler:$projectLibVerDefault"

    implementation      "androidx.appcompat:appcompat:$projectLibVerAppcompatAppcompat"
    implementation      "androidx.lifecycle:lifecycle-common-java8:$projectLibVerLifecycleLifecycleCommonJava8"
    implementation      "androidx.lifecycle:lifecycle-extensions:$projectLibVerLifecycleLifecycleExtensions"

    implementation      "androidx.recyclerview:recyclerview:$projectLibVerRecyclerViewRecyclerView"

    // comment out if you don't need Location API
    // (and uncomment lines in proguard-project-app.pro)
    implementation      "com.google.android.material:material:$projectLibVerNotxMaterialMaterial"
    implementation      "com.google.android.gms:play-services-location:$projectLibVerDefault"

    implementation      "com.google.code.gson:gson:$projectLibVerGson"

    //noinspection GradleDependency
    implementation     ("com.squareup.retrofit2:retrofit:$projectLibVerDefault") {
        exclude group:  "com.squareup.okhttp3", module: "okhttp"
    }
    //noinspection GradleDependency
    implementation     ("com.squareup.retrofit2:converter-gson:$projectLibVerDefault") {
        exclude group:  "com.google.code.gson", module: "gson"
    }

    //noinspection GradleDependency
    implementation      "com.squareup.okhttp3:okhttp:$projectLibVerDefault"
    implementation      "com.squareup.okhttp3:logging-interceptor:$projectLibVerDefault"

    implementation      "io.reactivex.rxjava3:rxjava:$projectLibVerRxJava3"

    implementation      "androidx.paging:paging-runtime:$projectLibVerPaging"

    implementation      "com.github.akhasoft:yakhont:$projectVerName@aar"
}

// for demo simple let's build both release and debug - just to be sure the weaver is working fine

// null means default config (or provide something like "projectDir.absolutePath + '/your.config'")
//   or: String[] weaverConfigFiles = new String[] {projectDir.absolutePath + '/your_1.config' /*, ...*/ }
String weaverConfigFiles = null, pkg = android.defaultConfig.applicationId
boolean weaverDebug = false, weaverAddConfig = true

android.applicationVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompileProvider.get()

    javaCompile.doLast {
        String classesDir = javaCompile.destinationDir.toString()

        Weaver.run(variant.buildType.name == 'debug', weaverDebug, pkg, classesDir,
                // classesDir is needed for weaving using application's code
                javaCompile.classpath.asPath + File.pathSeparator + classesDir,
                android.bootClasspath.join(File.pathSeparator), weaverAddConfig, weaverConfigFiles)
    }
}

/* if by some reason you're about to use the deprecated Transform API, you can try the following:
android.registerTransform(new akha.yakhont.weaver.WeaverTransform(weaverDebug, pkg,
        android.bootClasspath.join(File.pathSeparator), weaverAddConfig, weaverConfigFiles))
*/
